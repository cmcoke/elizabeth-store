{% comment %}
  Summary:
  This section renders a blog article using various dynamic blocks like title, author, date, image, and content.
{% endcomment %}

<article class="py-8" itemscope itemtype="http://schema.org/BlogPosting">
  {% comment %}
    Begin looping through each block defined in the section to determine what content to display.
  {% endcomment %}
  {% for block in section.blocks %}
    {% comment %}
      Switch based on the block type to determine what HTML to render.
    {% endcomment %}
    {% case block.type %}
        {% comment %}
          If block type is 'article_title', render the article's title and link to the blog.
        {% endcomment %}
      {% when 'article_title' %}
        <div class="flex items-center justify-center">
          <div class="max-w-7xl text-center">
            <a href="{{ blog.url }}" class="text-base uppercase text-gray-500 hover:text-gray-900 font-bold">
              {{- blog.title -}}
            </a>
            <h1 class="text-4xl md:text-6xl font-medium" itemprop="headline">{{ article.title }}</h1>
          </div>
        </div>

        {% comment %}
          If block type is 'article_author', conditionally render the article's author if enabled.
        {% endcomment %}
      {% when 'article_author' %}
        <div class="flex items-center justify-center">
          <div class="max-w-7xl text-center" itemscope itemtype="http://schema.org/Person">
            {% comment %}
              Display the author's name only if enabled in settings.
            {% endcomment %}
            {% if section.settings.enable_author %}
              <small itemprop="author">{{ article.author }}</small>
            {% endif %}
          </div>
        </div>

        {% comment %}
          If block type is 'article_published_date', render the published date if enabled.
        {% endcomment %}
      {% when 'article_published_date' %}
        <div class="flex items-center justify-center">
          <div class="max-w-7xl text-center">
            {% comment %}
              Display the article's published date if enabled in settings.
            {% endcomment %}
            {% if section.settings.enable_published_date %}
              <time itemprop="datePublished dateCreated" datetime="{{ article.published_at | date: '%Y-%m-%d' }}">
                {{ article.published_at | date: format: 'on_date' }}
              </time>
            {% endif %}
          </div>
        </div>

        {% comment %}
          If block type is 'featured_image', render the article's image or show a placeholder if no image exists.
        {% endcomment %}
      {% when 'featured_image' %}
        <div itemprop="image" class="max-w-7xl bg-blue-100 rounded-lg mx-2 md:mx-auto overflow-hidden my-4">
          {% comment %}
            Check if the article has an image to display.
          {% endcomment %}
          {% if article.image != blank %}
            <img
              class="w-full h-80 md:h-96 object-cover object-center"
              src="{{ article.image | image_url }}"
              width="640"
              height="427"
              alt="{{ article.image.alt }}"
            >
          {% else %}
            {% assign placeholder_image = 'lifestyle-1' %}
            {{ placeholder_image | placeholder_svg_tag: 'w-full h-80 md:h-96 object-cover object-center p-5' }}
          {% endif %}
        </div>

        {% comment %}
          If block type is 'article_content', render the full content of the article.
        {% endcomment %}
      {% when 'article_content' %}
        <div class="flex items-center justify-center px-4">
          <div itemprop="articleBody" class="max-w-6xl">
            {{ article.content }}
          </div>
        </div>
      {% else %}

    {% endcase %}
  {% endfor %}
</article>

{% comment %}
  If comments are enabled on the blog post, display the comments section and form.
{% endcomment %}
{% if blog.comments_enabled? %}
  <div id="comments" class="my-8">
    {% comment %}
      If there are comments on the article, list them.
    {% endcomment %}
    {% if article.comments_count > 0 %}
      <div class="flex-1 items-center justify-center mx-auto w-4xl px-4">
        <h1 class="text-lg mb-4 font-medium">See what people are saying</h1>

        {% comment %}
          Paginate the comments in batches of 5.
        {% endcomment %}
        {% paginate article.comments by 5 %}
          {% comment %}
            Loop through and display each comment.
          {% endcomment %}
          {% for comment in article.comments %}
            <div class="flex-1 border my-4 px-4 py-2 sm:px-6 sm:py-4 leading-relaxed">
              <span class="comment-author">{{ comment.author }}</span>
              <span class="text-xs text-gray-400">{{ comment.created_at | date: format: 'default' }}</span>
              <p class="text=sm">{{ comment.content }}</p>
            </div>
          {% endfor %}

          {% comment %}
            Display pagination links if there are multiple pages of comments.
          {% endcomment %}
          <div class="max-w-6xl mx-auto">
            {% render 'pagination', pagination: paginate %}
          </div>
        {% endpaginate %}
      </div>
    {% else %}
      <h1 class="text-lg mb-4 font-medium text-center">There are no comments in this article</h1>
    {% endif %}
  </div>

  <div id="comment_form" class="mb-8">
    {% comment %}
      Display the form for submitting a new comment.
    {% endcomment %}
    {% form 'new_comment', article %}
      <div class="flex-1 mx-auto items-center justify-center max-w-4xl px-4">
        {% comment %}
          Show error messages if the form failed to submit.
        {% endcomment %}
        {%- if form.errors -%}
          <div class="border p-5">
            <div class="flex flex-row items-center w-full my-3">
              <div class="text-red-500">
                {% render 'icon-failed' %}
              </div>
              <div class="text-sm font-medium ml-3">Oh no! Your comment was not posted</div>
            </div>
            <ul class="px-4 mb-3 ml-7 list-decimal">
              {% comment %}
                List each error from the form.
              {% endcomment %}
              {% for error in form.errors %}
                <li>
                  <span>{{ form.errors.messages[error] }}</span>
                </li>
              {% endfor %}
            </ul>
          </div>
          {% comment %}
            Show success message if the form was posted successfully.
          {% endcomment %}
        {%- elsif form.posted_successfully? -%}
          <div class="flex flex-row items-center w-full my-3 p-5">
            <div class="text-green-500">
              {% render 'icon-success' %}
            </div>
            <div class="text-sm font-medium ml-3">Comment was posted successfully</div>
          </div>
        {%- endif -%}

        <!-- Form Inputs -->
        <div class="px-1 md:flex md-3">
          <div class="px-3 md:w-1/2">
            <label for="comment_author" class="text-gray-700 font-medium uppercase text-xs mb-2">Name</label>
            <input
              type="text"
              name="comment[author]"
              id="comment_author"
              class="w-full text-gray-700 border py-3 px-4 mb-3 focus:outline-none"
              placeholder="Jane Doe"
              required
            >
          </div>
          <div class="px-3 md:w-1/2">
            <label for="comment_email" class="text-gray-700 font-medium uppercase text-xs mb-2">Email</label>
            <input
              type="email"
              name="comment[email]"
              id="comment_email"
              class="w-full text-gray-700 border py-3 px-4 mb-3 focus:outline-none"
              placeholder="janedoe@mail.com"
              required
            >
          </div>
        </div>
        <div class="px-1 md:flex mb-3">
          <div class="md:w-full px-3">
            <label for="comment_content" class="text-gray-700 font-medium uppercase text-xs mb-2">Comment</label>
            <textarea
              class="w-full text-gray-700 resize-none h-20 py-2 px-3 focus:outline-none border"
              name="comment[body]"
              id="comment_content"
              required
            ></textarea>
          </div>
        </div>
        <div class="px-1 md:flex mb-3">
          <div class="w-full px-3">
            <input
              class="w-full cursor-pointer px-4 py-2 border text-base font-medium text-white bg-gray-900 hover:bg-gray-500"
              type="submit"
              value="Post Comment"
            >
          </div>
        </div>
      </div>
    {% endform %}
  </div>
{% endif %}

{% comment %}
  Summary of schema:
  This section defines structured data (JSON-LD) for search engines like Google.
{% endcomment %}
<script type="application/ld+json">
  {
    "@context": "http://schema.org",  {% comment %} Specifies the vocabulary for the schema markup. {% endcomment %}

    "@type": "BlogPosting",  {% comment %} Declares the type of content as a blog post. {% endcomment %}

    "headline": {{ article.title | json }},  {% comment %} Outputs the article's title as the headline. {% endcomment %}

    "articleBody": {{ article.content | strip_html | json }},  {% comment %} Outputs the full article content, stripped of HTML tags. {% endcomment %}

     {% comment %} Adds a description from the excerpt, if available. {% endcomment %}
    {% if article.excerpt != blank %}
      "description": {{ article.excerpt | strip_html | json }},
    {% endif %}

     {% comment %} Adds the article image if one exists. {% endcomment %}
    {% if article.image %}
      "image": [
        {{ article.image | image_url |  prepend: 'https:' | json }}
      ],
    {% endif %}

    "datePublished": {{ article.published_at | date: format: 'default' | json}},  {% comment %} Outputs the published date. {% endcomment %}

    "dateCreated": {{ article.created_at | date: format: 'default' | json}},  {% comment %} Outputs the created date. {% endcomment %}

     {% comment %} Outputs the author's name for structured data. {% endcomment %}
    "author": {
      "@type": "Person",
      "name": {{ article.author | json}}
    },

     {% comment %} Outputs the shop name as the publisher for structured data. {% endcomment %}
    "publisher": {
      "@type": "Organization",
      "name": {{ shop.name | json }}
    }
  }
</script>

{% comment %}
  Summary:
  This schema section defines the settings and block options available
  for customizing the article layout in the theme editor.
{% endcomment %}

{% # theme-check-disable %}
{% schema %}
{
  "name": "Template Article", // Name of the template section shown in the theme editor.

  "settings": [
    {
      "type": "checkbox", // Defines a checkbox input in the editor.
      "id": "enable_author", // Unique ID to identify this setting.
      "default": true, // Checkbox is checked by default.
      "label": "Display Author Name" // Label shown in the editor for this option.
    },
    {
      "type": "checkbox", // Defines another checkbox input.
      "id": "enable_published_date", // Unique ID for this setting.
      "default": true, // Default value is true (checked).
      "label": "Display Published Date" // Label shown to toggle published date.
    }
  ],

  "blocks": [
    {
      "type": "article_title", // Type of block that renders the article title.
      "name": "Title", // Block name shown in the theme editor.
      "limit": 1 // Only one instance of this block is allowed.
    },
    {
      "type": "article_author", // Type of block that displays the author's name.
      "name": "Author", // Name shown in the editor.
      "limit": 1 // Only one instance allowed.
    },
    {
      "type": "article_published_date", // Type of block to show the published date.
      "name": "Published Date", // Editor label.
      "limit": 1 // Only one instance allowed.
    },
    {
      "type": "featured_image", // Block that displays the featured image.
      "name": "Thumbnail", // Label shown in the editor.
      "limit": 1 // One image block allowed.
    },
    {
      "type": "article_content", // Block that displays the article content.
      "name": "Content", // Editor label for the content block.
      "limit": 1 // Only one content block allowed.
    }
  ]
}
{% endschema %}
{% # theme-check-enable %}
